# bot/handlers/orders.py

import os

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputMediaPhoto
from .object_detection import PPEPhotoDetector
from aiogram.types import BufferedInputFile

from bot.database.methods.get import (
    get_document_photos,
    get_employee_by_telegram_id,
    get_user_active_documents,
    get_document_details,
)
from bot.database.methods.update import update_work_status

from bot.database.methods.create import save_document_photo

from bot.keyboards import get_inline_keyboard

router = Router()


detector = PPEPhotoDetector(model_path="yolo11n.pt", confidence_threshold=0.4)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WorkOrderStates(StatesGroup):
    waiting_start_photos = State()
    waiting_completion_photos = State()


def get_orders_keyboard(documents: list) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞—Ä—è–¥–æ–≤

    Args:
        documents: —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Ä—è–¥–æ–≤
    """
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä—è–¥–∞
    for doc in documents:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –Ω–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        button_text = f"üìÑ ‚Ññ{doc['document_number'][:10]}"
        if len(doc["document_number"]) > 10:
            button_text = f"üìÑ ‚Ññ{doc['document_number'][:10]}..."

        # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
        callback_data = f"order_detail:{doc['document_number']}"

        buttons.append((button_text, callback_data))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    buttons.append(("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"))

    # –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞—Ä—è–¥—ã –ø–æ 1 –≤ —Å—Ç—Ä–æ–∫–µ, –∞ "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω–æ
    sizes = [1] * len(documents) + [1]

    return get_inline_keyboard(*buttons, sizes=tuple(sizes))


@router.callback_query(F.data == "my_orders")
async def show_my_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—è–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = callback.from_user.id

    result = await get_user_active_documents(telegram_id)

    if not result["success"]:
        await callback.message.edit_text(
            f"‚ùå {result['error']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_inline_keyboard(("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu")),
        )
        await callback.answer()
        return

    if result["documents_count"] == 0:
        await callback.message.edit_text(
            f"üìã <b>–ú–æ–∏ –Ω–∞—Ä—è–¥—ã</b>\n\n"
            f"üë§ {result['employee_name']}\n\n"
            f"üìÑ –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Ä—è–¥–æ–≤.\n\n"
            f'<i>–î–µ–π—Å—Ç–≤—É—é—â–∏–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞—Ä—è–¥—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–Ω–∏–µ"</i>',
            reply_markup=get_inline_keyboard(("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu")),
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–µ–∫—Å—Ç
    text = f"üìä <b>–í—Å–µ–≥–æ –Ω–∞—Ä—è–¥–æ–≤: {result['documents_count']}</b>\n\n"

    for i, doc in enumerate(result["documents"], 1):
        task_short = doc["task_description"][:50]
        if len(doc["task_description"]) > 50:
            task_short += "..."

        text += (
            f"<b>{i}. üì¨–ù–∞—Ä—è–¥ ‚Ññ{doc['document_number']}</b>\n"
            f"‚è∞ –°—Ä–æ–∫–∏: {doc['start_datetime']} - {doc['end_datetime']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task_short}\n\n"
        )

    text += "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Ä—è–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"

    await callback.message.edit_text(
        text,
        reply_markup=get_orders_keyboard(result["documents"]),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order_detail:"))
async def show_order_detail(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—è–¥–µ"""
    telegram_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ callback_data
    document_number = callback.data.split(":", 1)[1]

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    result = await get_document_details(document_number, telegram_id)

    if not result["success"]:
        await callback.message.edit_text(
            f"‚ùå {result['error']}",
            reply_markup=get_inline_keyboard(
                ("üîô –ö —Å–ø–∏—Å–∫—É –Ω–∞—Ä—è–¥–æ–≤", "my_orders"),
                ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
                sizes=(1, 1),
            ),
        )
        await callback.answer()
        return

    doc = result["document"]
    employee = await get_employee_by_telegram_id(telegram_id)

    text = f"üìÑ –ù–∞—Ä—è–¥ ‚Ññ{doc['document_number']}\n\n"

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üè¢ –§–∏–ª–∏–∞–ª: {doc['branch']}\n"
    text += f"üè≠ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {doc['department']}\n"
    text += f"‚öôÔ∏è –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {doc['work_type']}\n\n"

    # –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:\n{doc['task_description']}\n\n"

    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞—Ä—è–¥–∞:\n"
    participants = doc["participants"]

    if participants["supervisor"]:
        text += f"‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç: {participants['supervisor']}\n"
    if participants["approver"]:
        text += f"‚Ä¢ –î–æ–ø—É—Å–∫–∞—é—â–∏–π: {participants['approver']}\n"
    if participants["executor"]:
        text += f"‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç: {participants['executor']}\n"
    if participants["observer"]:
        text += f"‚Ä¢ –ù–∞–±–ª—é–¥–∞—é—â–∏–π: {participants['observer']}\n"
    if participants["crew_members"]:
        crew_list = ", ".join(participants["crew_members"])
        text += f"‚Ä¢ –ß–ª–µ–Ω—ã –±—Ä–∏–≥–∞–¥—ã: {crew_list}\n"

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    text += f"\n‚è∞ –ü–µ—Ä–∏–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
    text += f"üïê –ù–∞—á–∞–ª–æ: {doc['start_datetime']}\n"
    text += f"üïï –û–∫–æ–Ω—á–∞–Ω–∏–µ: {doc['end_datetime']}\n"

    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞ —Ä–∞–±–æ—Ç
    if doc.get("actual_start_datetime"):
        text += f"üïê –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ: {doc['actual_start_datetime']}\n"
    if doc.get("actual_end_datetime"):
        text += f"üïï –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {doc['actual_end_datetime']}\n"

    # –°—Ç–∞—Ç—É—Å
    text += f"\nüìä –°—Ç–∞—Ç—É—Å: {doc['status']}\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    if doc["file_exists"]:
        text += f"\nüìé –ö –Ω–∞—Ä—è–¥—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª\n"

    # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω: {doc['created']}"
    if doc["updated"] != doc["created"]:
        text += f"\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω: {doc['updated']}"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ä–∞–±–æ—Ç
    if employee.role == "executor":
        if doc["status"] == "–°–æ–∑–¥–∞–Ω–æ":
            buttons.append(("üöÄ –°–¢–ê–†–¢ –†–ê–ë–û–¢", f"start_work:{document_number}"))
        elif doc["status"] == "–í —Ä–∞–±–æ—Ç–µ":
            buttons.append(("üèÅ –ó–ê–í–ï–†–®–ò–¢–¨ –†–ê–ë–û–¢–´", f"complete_work:{document_number}"))

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Ä–∞–±–æ—Ç (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ)
    if employee.role == "supervisor":
        if doc["status"] == "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞":
            buttons.append(
                ("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ", f"approve_start:{document_number}")
            )
            buttons.append(("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"reject_start:{document_number}"))
        elif doc["status"] == "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è":
            buttons.append(
                ("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", f"approve_completion:{document_number}")
            )
            buttons.append(("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"reject_completion:{document_number}"))

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.extend(
        [("üîô –ö —Å–ø–∏—Å–∫—É –Ω–∞—Ä—è–¥–æ–≤", "my_orders"), ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu")]
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫
    if employee.role in ["executor", "supervisor"] and doc["status"] in [
        "–°–æ–∑–¥–∞–Ω–æ",
        "–í —Ä–∞–±–æ—Ç–µ",
        "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞",
        "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
    ]:
        if doc["status"] in ["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞", "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"]:
            sizes = (2, 1, 1)  # 2 –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –ø–æ 1
        else:
            sizes = (1, 1, 1)  # –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É
    else:
        sizes = (1, 1)

    await callback.message.edit_text(
        text,
        reply_markup=get_inline_keyboard(*buttons, sizes=sizes),
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç
@router.callback_query(F.data.startswith("start_work:"))
async def start_work_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]

    await state.set_state(WorkOrderStates.waiting_start_photos)
    await state.update_data(
        document_number=document_number,
        photo_type="start",
    )

    await callback.message.edit_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç.",
        reply_markup=get_inline_keyboard(
            ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_photo_upload"),
            sizes=(1,),
        ),
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç
@router.callback_query(F.data.startswith("complete_work:"))
async def complete_work_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]

    await state.set_state(WorkOrderStates.waiting_completion_photos)
    await state.update_data(
        document_number=document_number,
        photo_type="completion",
    )

    await callback.message.edit_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç.",
        reply_markup=get_inline_keyboard(
            ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_photo_upload"),
            sizes=(1,),
        ),
    )
    await callback.answer()


@router.message(F.photo, WorkOrderStates.waiting_start_photos)
@router.message(F.photo, WorkOrderStates.waiting_completion_photos)
async def handle_work_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞–±–æ—Ç"""
    data = await state.get_data()
    document_number = data.get("document_number")
    photo_type = data.get("photo_type")
    first_photo = data.get("first_photo", True)
    photos_count = data.get("photos_count", 0)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    MAX_PHOTOS = 10
    if photos_count >= MAX_PHOTOS:
        await message.answer(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ({MAX_PHOTOS})")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    best_photo = message.photo[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    result = await save_document_photo(
        message.bot,
        best_photo.file_id,
        document_number,
        photo_type,
        message.from_user.id,
    )

    if result["success"]:
        photos_count += 1
        await state.update_data(first_photo=False, photos_count=photos_count)

        if first_photo:
            await message.answer(
                f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({photos_count}/{MAX_PHOTOS}). "
                "–ö–æ–≥–¥–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=get_inline_keyboard(
                    ("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", "finish_photo_upload"),
                    ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_photo_upload"),
                    sizes=(1, 1),
                ),
            )
        else:
            await message.answer(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({photos_count}/{MAX_PHOTOS}).")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {result['error']}")


@router.callback_query(F.data == "finish_photo_upload")
async def finish_photo_upload(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    data = await state.get_data()
    photos_count = data.get("photos_count", 0)
    document_number = data.get("document_number")
    photo_type = data.get("photo_type")

    if photo_type == "start":
        await update_work_status(
            document_number, "pending_start", callback.from_user.id
        )
        text = (
            f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É ‚Ññ{document_number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã!"
            f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {photos_count} —Ñ–æ—Ç–æ"
        )
    else:
        await update_work_status(
            document_number, "pending_completion", callback.from_user.id
        )
        text = (
            f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É ‚Ññ{document_number} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã!"
            f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {photos_count} —Ñ–æ—Ç–æ"
        )

    await callback.message.edit_text(
        text,
        reply_markup=get_inline_keyboard(
            ("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Ä—è–¥—É", f"back_to_order:{document_number}"),
            sizes=(1,),
        ),
    )

    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Ä—è–¥—É
@router.callback_query(F.data.startswith("back_to_order:"))
async def back_to_order_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Ä—è–¥—É"""
    document_number = callback.data.split(":", 1)[1]

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await show_order_detail(callback, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@router.callback_query(F.data == "cancel_photo_upload")
async def cancel_photo_upload_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await callback.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


# –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
@router.callback_query(F.data.startswith("approve_start:"))
async def handle_approve_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç
    photos = await get_document_photos(document_number, "start")

    if not photos:
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
    media_group = []
    for photo in photos:
        media_group.append(
            InputMediaPhoto(
                media=photo["file_id"], caption="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç"
            )
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await callback.message.answer_media_group(media=media_group)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        f"üìÑ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number}\n"
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}",
        reply_markup=get_inline_keyboard(
            ("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", f"confirm_approve_start:{document_number}"),
            ("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"confirm_reject_start:{document_number}"),
            ("üî¨ –ê–Ω–∞–ª–∏–∑ –°–ò–ó", f"analyze_ppe_start:{document_number}"),
            ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
            sizes=(2, 1, 1),
        ),
    )

    await callback.answer()


# –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç
@router.callback_query(F.data.startswith("approve_completion:"))
async def handle_approve_completion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç
    photos = await get_document_photos(document_number, "completion")

    if not photos:
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
    media_group = []
    for photo in photos:
        media_group.append(
            InputMediaPhoto(
                media=photo["file_id"], caption="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç"
            )
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    await callback.message.answer_media_group(media=media_group)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer(
        f"üìÑ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number}\n"
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}",
        reply_markup=get_inline_keyboard(
            ("‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å", f"confirm_approve_completion:{document_number}"),
            ("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"confirm_reject_completion:{document_number}"),
            ("üî¨ –ê–Ω–∞–ª–∏–∑ –°–ò–ó", f"analyze_ppe_completion:{document_number}"),
            ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
            sizes=(2, 1, 1),
        ),
    )

    await callback.answer()


@router.callback_query(F.data.startswith("analyze_ppe_start:"))
async def analyze_ppe_start(callback: CallbackQuery, state: FSMContext):
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # (1) –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —é–∑–µ—Ä ‚Äî supervisor (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    employee = await get_employee_by_telegram_id(telegram_id)
    if employee.role != "supervisor":
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    photos = await get_document_photos(document_number, "start")
    if not photos:
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è
    await callback.message.edit_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑ –°–ò–ó –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    verdicts = []
    media_group = []

    for idx, photo in enumerate(photos):
        try:
            # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –Ω–∞ –¥–∏—Å–∫
            file_info = await callback.bot.get_file(photo["file_id"])

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ 'id'
            local_path = f"temp_photo_{idx}_{photo['file_id'][-10:]}.jpg"
            result_path = f"result_{idx}_{photo['file_id'][-10:]}.jpg"

            await callback.bot.download_file(file_info.file_path, local_path)

            # --- –î–µ—Ç–µ–∫—Ü–∏—è
            result_img, detections, analysis = detector.process_photo(
                local_path, output_path=result_path
            )
            verdict = analysis["safety_status"]

            # –î–æ–±–∞–≤–∏–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(result_path, "rb") as f:
                buf = BufferedInputFile(f.read(), filename=f"result_{idx}.jpg")
                media_group.append(
                    InputMediaPhoto(
                        media=buf, caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {idx+1}\n{verdict}"
                    )
                )

            verdicts.append(verdict)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {idx}: {e}")
            verdicts.append("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        finally:
            # --- –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(local_path):
                    os.remove(local_path)
                if os.path.exists(result_path):
                    os.remove(result_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    if media_group:
        await callback.message.answer_media_group(media_group)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç
        safe_count = sum(
            1
            for v in verdicts
            if "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" in v.lower() or "—Å–æ–±–ª—é–¥–µ–Ω—ã" in v.lower()
        )
        total_count = len(verdicts)

        if safe_count == total_count:
            verdict_text = "‚úÖ –°–ò–ó —Å–æ–±–ª—é–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö!"
            verdict_emoji = "‚úÖ"
        elif safe_count > 0:
            verdict_text = (
                f"‚ö†Ô∏è –°–ò–ó —Å–æ–±–ª—é–¥–µ–Ω—ã –Ω–∞ {safe_count} –∏–∑ {total_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
            verdict_emoji = "‚ö†Ô∏è"
        else:
            verdict_text = "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏—è –°–ò–ó –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö!"
            verdict_emoji = "‚ùå"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        await callback.message.answer(
            f"<b>üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –°–ò–ó:</b>\n\n"
            f"{verdict_emoji} {verdict_text}\n\n"
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_count}",
            reply_markup=get_inline_keyboard(
                ("üîô –ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é", f"approve_start:{document_number}"),
                ("üìã –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                sizes=(2,),
            ),
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            reply_markup=get_inline_keyboard(
                ("üîô –ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é", f"approve_start:{document_number}"), sizes=(1,)
            ),
        )

    await callback.answer()


@router.callback_query(F.data.startswith("analyze_ppe_completion:"))
async def analyze_ppe_completion(callback: CallbackQuery, state: FSMContext):
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # (1) –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —é–∑–µ—Ä ‚Äî supervisor
    employee = await get_employee_by_telegram_id(telegram_id)
    if employee.role != "supervisor":
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    photos = await get_document_photos(document_number, "completion")
    if not photos:
        await callback.answer("‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –Ω–∞—á–∞–ª—Å—è
    await callback.message.edit_text(
        "üîÑ –ê–Ω–∞–ª–∏–∑ –°–ò–ó –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    verdicts = []
    media_group = []

    for idx, photo in enumerate(photos):
        try:
            # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file_info = await callback.bot.get_file(photo["file_id"])

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏ —á–∞—Å—Ç—å file_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            local_path = f"temp_photo_{idx}_{photo['file_id'][-10:]}.jpg"
            result_path = f"result_{idx}_{photo['file_id'][-10:]}.jpg"

            await callback.bot.download_file(file_info.file_path, local_path)

            # --- –î–µ—Ç–µ–∫—Ü–∏—è
            result_img, detections, analysis = detector.process_photo(
                local_path, output_path=result_path
            )
            verdict = analysis["safety_status"]

            # –î–æ–±–∞–≤–∏–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            with open(result_path, "rb") as f:
                buf = BufferedInputFile(f.read(), filename=f"result_{idx}.jpg")
                media_group.append(
                    InputMediaPhoto(
                        media=buf, caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {idx+1}\n{verdict}"
                    )
                )

            verdicts.append(verdict)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {idx}: {e}")
            verdicts.append("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        finally:
            # --- –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(local_path):
                    os.remove(local_path)
                if os.path.exists(result_path):
                    os.remove(result_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    if media_group:
        await callback.message.answer_media_group(media_group)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –≤–µ—Ä–¥–∏–∫—Ç
        safe_count = sum(
            1
            for v in verdicts
            if "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ" in v.lower() or "—Å–æ–±–ª—é–¥–µ–Ω—ã" in v.lower()
        )
        total_count = len(verdicts)

        if safe_count == total_count:
            verdict_text = "‚úÖ –°–ò–ó —Å–æ–±–ª—é–¥–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö!"
            verdict_emoji = "‚úÖ"
        elif safe_count > 0:
            verdict_text = (
                f"‚ö†Ô∏è –°–ò–ó —Å–æ–±–ª—é–¥–µ–Ω—ã –Ω–∞ {safe_count} –∏–∑ {total_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
            verdict_emoji = "‚ö†Ô∏è"
        else:
            verdict_text = "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏—è –°–ò–ó –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö!"
            verdict_emoji = "‚ùå"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        await callback.message.answer(
            f"<b>üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –°–ò–ó:</b>\n\n"
            f"{verdict_emoji} {verdict_text}\n\n"
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_count}",
            reply_markup=get_inline_keyboard(
                ("üîô –ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é", f"approve_completion:{document_number}"),
                ("üìã –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                sizes=(2,),
            ),
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            reply_markup=get_inline_keyboard(
                ("üîô –ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é", f"approve_completion:{document_number}"),
                sizes=(1,),
            ),
        )

    await callback.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.callback_query(F.data.startswith("confirm_approve_start:"))
async def confirm_approve_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
    result = await update_work_status(document_number, "in_progress", telegram_id)

    if result["success"]:
        await callback.message.edit_text(
            f"‚úÖ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number} —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ!\n"
            f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –í —Ä–∞–±–æ—Ç–µ",
            reply_markup=get_inline_keyboard(
                ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
                sizes=(1, 1),
            ),
        )
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)


@router.callback_query(F.data.startswith("confirm_approve_completion:"))
async def confirm_approve_completion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    result = await update_work_status(document_number, "completed", telegram_id)

    if result["success"]:
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number} —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ!\n"
            f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            reply_markup=get_inline_keyboard(
                ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
                sizes=(1, 1),
            ),
        )
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)


@router.callback_query(F.data.startswith("confirm_reject_start:"))
async def confirm_reject_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–°–æ–∑–¥–∞–Ω–æ"
    result = await update_work_status(document_number, "created", telegram_id)

    if result["success"]:
        await callback.message.edit_text(
            f"‚ùå –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
            f"–°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞: –°–æ–∑–¥–∞–Ω–æ",
            reply_markup=get_inline_keyboard(
                ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
                sizes=(1, 1),
            ),
        )
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)


@router.callback_query(F.data.startswith("confirm_reject_completion:"))
async def confirm_reject_completion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç"""
    document_number = callback.data.split(":", 1)[1]
    telegram_id = callback.from_user.id

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
    result = await update_work_status(document_number, "in_progress", telegram_id)

    if result["success"]:
        await callback.message.edit_text(
            f"‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞—Ä—è–¥—É ‚Ññ{document_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n"
            f"–°—Ç–∞—Ç—É—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞: –í —Ä–∞–±–æ—Ç–µ",
            reply_markup=get_inline_keyboard(
                ("üîô –ö –Ω–∞—Ä—è–¥—É", f"order_detail:{document_number}"),
                ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
                sizes=(1, 1),
            ),
        )
    else:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", show_alert=True)


# –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@router.callback_query(F.data == "cancel_photo_upload")
async def cancel_photo_upload(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await state.clear()

    await callback.message.edit_text(
        "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_inline_keyboard(
            ("üîô –ö —Å–ø–∏—Å–∫—É –Ω–∞—Ä—è–¥–æ–≤", "my_orders"),
            ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
            sizes=(1, 1),
        ),
    )
    await callback.answer()
